esphome:
  name: ${device_name}
  platform: ${platform}
  board: ${board}
  build_path: build/${device_name}

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret wifi_domain

logger:
  level: ${logger_level}
  baud_rate: ${logger_baud_rate}

api:
  password: !secret api_password

ota:
  safe_mode: true
  password: !secret ota_password

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: ${timezone}
    on_time:
      - seconds: 0
        minutes: /1
        then:
          # Automation for scheduled start
          - if:
              condition:
                and:
                  - switch.is_on: ${device_name}_schedule
                  - binary_sensor.is_on: ${device_name}_day
                  - binary_sensor.is_on: ${device_name}_start
              then:
                - switch.turn_on: ${device_name}_trigger
                - logger.log: "${device_name} scheduled start triggered"
          # Automation for scheduled stop
          - if:
              condition:
                and:
                  - switch.is_on: ${device_name}_schedule
                  - binary_sensor.is_on: ${device_name}_day
                  - binary_sensor.is_on: ${device_name}_stop
              then:
                - switch.turn_off: ${device_name}_trigger
                - logger.log: "${device_name} scheduled stop triggered"

switch:
  # Trigger switch
  - platform: gpio
    name: ${device_name}_trigger
    id: ${device_name}_trigger
    pin: $actuator_pin
    restore_mode: ALWAYS_OFF
  # Schedule switch
  - platform: template
    name: ${device_name}_schedule
    id: ${device_name}_schedule
    restore_state: true
  # Common switches
  - <<: !include common/switch/restart.yaml

binary_sensor:
  # Start time in schedule
  - platform: template
    name: ${device_name}_start
    id: ${device_name}_start
    lambda: |-
      auto esptime = new time::ESPTime();
      std::string time_str = esptime->strftime("%-02H:%-02M");
      if(id(${device_name}_schedule_start).state == time_str)
      {
        return true;
      }
      return false;
  # Stop time in schedule
  - platform: template
    name: ${device_name}_stop
    id: ${device_name}_stop
    lambda: |-
      auto esptime = new time::ESPTime();
      std::string time_str = esptime->strftime("%-02H:%-02M");
      if(id(${device_name}_schedule_stop).state == time_str)
      {
        return true;
      }
      return false;
  # Weekday in schedule
  - platform: template
    name: ${device_name}_day
    id: ${device_name}_day
    lambda: |-
      auto esptime = new time::ESPTime();
      std::string day_str = esptime->strftime("%a");
      std::string scheduled_days(id(${device_name}_schedule_day).state);
      std::size_t day_found = scheduled_days.find(day_str);
      if(std::string::npos != day_found)
      {
        return true;
      }
      return false;
  # Common binary sensor
  - <<: !include common/binary_sensor/status.yaml

text_sensor:
  # Start time in schedule from hass
  - platform: homeassistant
    name: ${device_name}_schedule_start
    id: ${device_name}_schedule_start
    entity_id: sensor.${device_name}_schedule_start
  # Stop time in schedule from hass
  - platform: homeassistant
    name: ${device_name}_schedule_stop
    id: ${device_name}_schedule_stop
    entity_id: sensor.${device_name}_schedule_stop
  # Weekday in schedule from hass
  - platform: homeassistant
    name: ${device_name}_schedule_day
    id: ${device_name}_schedule_day
    entity_id: sensor.${device_name}_schedule_day
  # Common text sensors
  - <<: !include common/text_sensor/version.yaml
  - <<: !include common/text_sensor/wifi_info.yaml
  - <<: !include common/text_sensor/firmware.yaml

sensor: !include_dir_list common/sensor/